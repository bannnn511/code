When we started to investigate enhancements to
the SunOS kernel to support multiprocessors, we
realized that we wanted to go further than merely
adding locks to the kernel and keeping the user pro-
cess model unchanged. It was important for the ker-
nel to be capable of a high degree of concurrency on
tightly coupled symmetric multiprocessors, but it was
also a goal to support more than one thread of con-
trol within a user process. These threads must be
capable of executing system calls and handling page
faults independently. On multiprocessor systems,
these threads of control must be capable of running
concurrently on different processors. [Powell 1991]
described the user visible thread architecture.
We also wanted the kernel to be capable of
bounded dispatch latency for real-time threads
[Khanna 1992]. Real-time response requires absolute
control over scheduling, requiring preemption at
almost any point in the kernel, and elimination of
unbounded priority inversions wherever possible.
The kernel itself is a very complex multi-
threaded program. Threads can be used by user
applications as a structuring technique to manage
multiple asynchronous activities; the kernel benefits
from a thread facility that is essentially the same.
The resulting SunOS 5.0 kernel, the central
operating system component of Solaris 2.0, is fully
preemptible, has real-time scheduling, symmetrically
supports multiprocessors, and supports user-level
multithreading. Several of the locking strategies
used in this kernel were described in [Kleiman
1992]. In this paper we’ll describe some of the
implementation features that make this kernel
unique.
Overview of the Kernel Architecture
A kernel thread is the fundamental entity that is
scheduled and dispatched onto one of the CPUs of
the system. A kernel thread is very lightweight,
having only a small data structure and a stack.
Switching between kernel threads does not require a
change of virtual memory address space information,
so it is relatively inexpensive. Kernel threads are
fully preemptible and may be scheduled by any of
the scheduling classes in the system, including the
real-time (fixed priority) class. Since all other exe-
cution entities are built using kernel threads, they
represent a fully preemptible, real-time ‘‘nucleus’’
within the kernel.
Kernel threads use synchronization primitives
that support protocols for preventing priority inver-
sion, so a thread’s priority is determined by which
activities it is impeding by holding locks as well as
by the service it is performing [Khanna 1992].
SunOS uses kernel threads to provide asynchro-
nous kernel activity, such as asynchronous writes to
disk, servicing STREAMS queues, and callouts. This
removes various diversions in the idle loop and trap
code and replaces them with independently
scheduled threads. Not only does this increase
potential concurrency (these activities can be handled
by other CPUs), but it also gives each asynchronous
activity a priority so that it can be appropriately
scheduled.
Even interrupts are handled by kernel threads.
The kernel synchronizes with interrupt handlers via
normal thread synchronization primitives. If an
interrupt thread encounters a locked synchronization
variable, it blocks and allows the critical section to
clear.
A major feature of the new kernel is its support
of multiple kernel-supported threads of control,
called lightweight processes (LWPs), in any user pro-
cess, sharing the address space of the process and
other resources, such as open files. The kernel sup-
ports the execution of user LWPs by associating a
kernel thread with each LWP, as shown in Figure 1.
While all LWPs have a kernel thread, not all kernel
threads have an LWP.
A user-level library uses LWPs to implement
user-level threads [Stein 1992]. These threads are
scheduled at user-level and switched by the library to
any of the LWPs belonging to the process. User
threads can also be bound to a particular LWP.
Separating user-level threads from the LWP allows
the user thread library to quickly switch between
user threads without entering the kernel. In addition,
it allows a user process to have thousands of threads,
without overwhelming kernel resources.